{"version":3,"file":"static/js/289.f60be04d.chunk.js","mappings":"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","sources":["components/pokemons/SearchForName.jsx","components/pokemons/PaginationGrid.jsx","components/pokemons/GetTypeColor.jsx","components/pokemons/PokemonCard.jsx","components/pokemons/PokemonList.jsx","components/pokemons/BarForFilter.jsx","components/pokemons/index.jsx","pages/mainPage/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nconst SearchForName = ({ onSearch }) => {\n  const [searchItem, setSearchItem] = useState('');\n\n  const handleSearch = () => {\n    setSearchItem('');\n  };\n\n  useEffect(() => {\n    // Викликаємо функцію onSearch при зміні searchTerm\n    onSearch(searchItem);\n  }, [searchItem, onSearch]);\n\n  return (\n    <div>\n      <TextField\n        label=\"Search by name Pokemon\"\n        variant=\"outlined\"\n        value={searchItem}\n        onChange={(e) => setSearchItem(e.target.value)}\n      />\n      <Button\n        variant=\"outlined\"\n        onClick={handleSearch}\n        disabled={!searchItem.trim()}\n      >\n        Clear\n      </Button>\n    </div>\n  );\n};\n\nSearchForName.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n\nexport default SearchForName;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TablePagination from '@mui/material/TablePagination';\n\nconst Pagination = ({\n  totalItems,\n  currentPage,\n  setCurrentPage,\n  pageSize,\n  setPageSize,\n}) => {\n  return (\n    <TablePagination\n      component=\"div\"\n      count={totalItems}\n      page={currentPage}\n      onPageChange={(event, newPage) => setCurrentPage(newPage)}\n      rowsPerPage={pageSize}\n      onRowsPerPageChange={(event) => {\n        setPageSize(parseInt(event.target.value, 10));\n        setCurrentPage(0);\n      }}\n      rowsPerPageOptions={[10, 20, 50]}\n    />\n  );\n};\n\nPagination.propTypes = {\n  totalItems: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  setCurrentPage: PropTypes.func.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  setPageSize: PropTypes.func.isRequired,\n};\n\nexport default Pagination;","export const GetTypeColor = (type) => {\n  switch (type) {\n    case 'normal':\n      return 'gray';\n    case 'fighting':\n      return 'red';\n    case 'flying':\n      return 'deepskyblue';\n    case 'poison':\n      return 'green';\n    case 'ground':\n      return 'khaki';\n    case 'rock':\n      return 'burlywood';\n    case 'bug':\n      return 'darkgreen';\n    case 'ghost':\n      return 'lightgray';\n    case 'steel':\n      return 'silver';\n    case 'fire':\n      return 'orangered';\n    case 'water':\n      return 'bluegreen';\n    case 'grass':\n      return 'lightgreen';\n    case 'electric':\n      return 'lightskyblue';\n    case 'psychic':\n      return 'purple';\n    case 'ice':\n      return 'lightblue';\n    case 'dragon':\n      return 'darkred';\n    case 'dark':\n      return 'darkgray';\n    case 'fairy':\n      return 'pink';\n    case 'unknown':\n      return 'lightgray';\n    case 'shadow':\n      return 'darkviolet';\n    default:\n      return 'black';\n  }\n};","import React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport { CardActionArea, Chip } from '@mui/material';\nimport PropTypes from 'prop-types';\n\nimport { GetTypeColor } from './GetTypeColor';\n\nfunction PokemonCard({ pokemon, index, onTypeClick, handlePokemonClick }) {\n  const handleTypeClick = (type) => {\n    onTypeClick(type);\n  };\n\n  return (\n    <Grid item key={index} xs={12} sm={6} md={4} lg={3}>\n      <Card sx={{ maxWidth: 345 }} onClick={() => handlePokemonClick(pokemon.id)}>\n        <CardActionArea>\n          <CardMedia\n            component=\"img\"\n            width=\"140\"\n            alt={pokemon.name}\n            src={pokemon.sprites?.other?.home?.front_default || ''}\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\n              {pokemon.name}\n            </Typography>\n            <strong>Stats:</strong>\n            {pokemon.stats?.map((stat) => (\n              <div key={stat.stat.name}>\n                {stat.stat.name}: {stat.base_stat}\n              </div>\n            ))}\n            <strong>Types:</strong>\n            {pokemon.types?.map((type) => (\n              <Chip\n                key={type.type.name}\n                label={type.type.name}\n                color=\"primary\"\n                sx={{ backgroundColor: GetTypeColor(type.type.name) }}\n                onClick={(event) => {\n                  event.stopPropagation(); // Зупиняє подальше поширення події, щоб не викликати onClick вище\n                  handleTypeClick(type.type.name, type);\n                }}\n              />\n            ))}\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Grid>\n  );\n}\n\nPokemonCard.propTypes = {\n  pokemon: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  onTypeClick: PropTypes.func.isRequired,\n  handlePokemonClick: PropTypes.func.isRequired,\n};\n\nexport default PokemonCard;\n","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport PropTypes from 'prop-types'\n\nimport PokemonCard from './PokemonCard';\n\nconst PokemonList = ({ pokemonList, handleTypeClick, handlePokemonClick }) => {\n  return (\n    <Grid container spacing={2}>\n      {pokemonList.map((pokemon, index) => (\n        <PokemonCard\n          key={pokemon.id || index}\n          pokemon={pokemon}\n          index={index}\n          onTypeClick={handleTypeClick}\n          handlePokemonClick={handlePokemonClick}\n        />\n      ))}\n    </Grid>\n  );\n}\n\nPokemonList.propTypes = {\n  pokemonList: PropTypes.array.isRequired,\n  handleTypeClick: PropTypes.func.isRequired,\n  handlePokemonClick: PropTypes.func.isRequired,\n}\n\nexport default PokemonList;","import React, { startTransition } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nconst BarForFilter = ({ searchItemType, setSearchItemType, navigate, fetchPokemonData }) => {\n\n  const handleSearchClear = () => {\n    startTransition(() => {\n      setSearchItemType('');\n      fetchPokemonData('https://pokeapi.co/api/v2/pokemon');\n      navigate('/');\n    })\n  };\n\n  return (\n    <div>\n      <TextField\n        variant=\"outlined\"\n        value={searchItemType}\n        InputProps={{\n          readOnly: true,\n        }}\n      />\n      <Button variant=\"outlined\" onClick={handleSearchClear}>Clear filter</Button>\n    </div>\n  );\n};\n\nBarForFilter.propTypes = {\n  searchItemType: PropTypes.string.isRequired,\n  setSearchItemType: PropTypes.func.isRequired,\n  navigate: PropTypes.func.isRequired,\n  fetchPokemonData: PropTypes.func.isRequired,\n};\n\nexport default BarForFilter;","import React, { useEffect, useState, useRef, startTransition } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\n\nimport SearchForName from './SearchForName';\nimport GridPagination from './PaginationGrid';\nimport PokemonList from './PokemonList';\nimport BarForFilter from './BarForFilter';\n\nconst PokemonGrid = () => {\n  const [pokemonList, setPokemonList] = useState([]);\n  const [pageSize, setPageSize] = useState(10);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalItems, setTotalItems] = useState(0);\n  const [searchItem, setSearchItem] = useState('');\n  const [searchItemType, setSearchItemType] = useState('');\n  const { type } = useParams();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n\n  const scrollPositionRef = useRef(0);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      scrollPositionRef.current = window.scrollY;\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const fetchPokemonData = async (url, page = 0, limit = 10) => {\n    setLoading(true);\n    try {\n      let fullUrl = `${url}?offset=${page * limit}&limit=${limit}`;\n\n      if (searchItem) {\n        fullUrl = `https://pokeapi.co/api/v2/pokemon/${searchItem}`;\n      }\n\n      const response = await fetch(fullUrl);\n      const data = await response.json();\n\n      if (data.results) {\n        const pokemonDetailsPromises = data.results.map(async (pokemon) => {\n          const detailsResponse = await fetch(pokemon.url);\n          const detailsData = await detailsResponse.json();\n          return detailsData;\n        });\n\n        const detailedPokemonData = await Promise.all(pokemonDetailsPromises);\n        setPokemonList(detailedPokemonData);\n        setTotalItems(data.count);\n      } else {\n        setPokemonList([data]);\n        setTotalItems(0);\n      }\n    } catch (error) {\n      console.error('Error fetching Pokemon data:', error);\n    }\n    setLoading(false);\n  };\n\n  const handleSearch = (item) => {\n    setSearchItem(item);\n  };\n\n  const handleTypeClick = async (type) => {\n    setLoading(true);\n    setSearchItemType(type);\n    try {\n      const response = await fetch(`https://pokeapi.co/api/v2/type/${type}`);\n      const data = await response.json();\n\n      if (data.pokemon) {\n        const pokemonDetailsPromises = data.pokemon.map(async (pokemon) => {\n          const detailsResponse = await fetch(pokemon.pokemon.url);\n          const detailsData = await detailsResponse.json();\n          return detailsData;\n        });\n\n        const detailedPokemonData = await Promise.all(pokemonDetailsPromises);\n        setPokemonList(detailedPokemonData);\n        setTotalItems(data.pokemon.length);\n        setCurrentPage(0);\n      } else {\n        console.error('No pokemon found for the type:', type);\n      }\n    } catch (error) {\n      console.error('Error fetching Pokemon data by type:', error);\n    }\n    setLoading(false);\n  };\n\n  const handlePokemonClick = (pokemonId) => {\n    startTransition(() => {\n      navigate(`/pokemon/${pokemonId}`);\n    });\n  };\n\n  useEffect(() => {\n    fetchPokemonData('https://pokeapi.co/api/v2/pokemon', currentPage, pageSize);\n  }, [currentPage, pageSize, searchItem]);\n\n  useEffect(() => {\n    if (type) {\n      handleTypeClick(type);\n    } else {\n      fetchPokemonData('https://pokeapi.co/api/v2/pokemon', currentPage, pageSize);\n    }\n  }, [type, currentPage, pageSize]);\n\n  useEffect(() => {\n    window.scrollTo(0, scrollPositionRef.current);\n  }, [pokemonList]);\n\n  return (\n    <div>\n      {searchItemType ? (\n        <div className=\"pagination-container\">\n          <BarForFilter\n            searchItemType={searchItemType}\n            setSearchItemType={setSearchItemType}\n            navigate={navigate}\n            fetchPokemonData={fetchPokemonData}\n          />\n        </div>\n      ) : (\n        <div className=\"pagination-container\">\n          <SearchForName onSearch={handleSearch} />\n          <GridPagination\n            totalItems={totalItems}\n            currentPage={currentPage}\n            setCurrentPage={setCurrentPage}\n            pageSize={pageSize}\n            setPageSize={setPageSize}\n          />\n        </div>\n      )}\n      <div className=\"pokemons-container\">\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}>\n            <CircularProgress />\n          </Box>\n        ) : (\n          <PokemonList\n            pokemonList={pokemonList}\n            handleTypeClick={handleTypeClick}\n            handlePokemonClick={handlePokemonClick}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonGrid;\n","import React from 'react';\nimport Pokemons from '../../components/pokemons'\n\nimport './style.css';\n\nconst Mainpage = () => {\n  return (\n    <div >\n      <Pokemons />\n    </div>\n  );\n};\n\nexport default Mainpage;"],"names":["_ref","onSearch","searchItem","setSearchItem","useState","useEffect","_jsxs","children","_jsx","TextField","label","variant","value","onChange","e","target","Button","onClick","handleSearch","disabled","trim","totalItems","currentPage","setCurrentPage","pageSize","setPageSize","TablePagination","component","count","page","onPageChange","event","newPage","rowsPerPage","onRowsPerPageChange","parseInt","rowsPerPageOptions","GetTypeColor","type","_pokemon$sprites","_pokemon$sprites$othe","_pokemon$sprites$othe2","_pokemon$stats","_pokemon$types","pokemon","index","onTypeClick","handlePokemonClick","Grid","item","xs","sm","md","lg","Card","sx","maxWidth","id","CardActionArea","CardMedia","width","alt","name","src","sprites","other","home","front_default","CardContent","Typography","gutterBottom","stats","map","stat","base_stat","types","Chip","color","backgroundColor","stopPropagation","handleTypeClick","pokemonList","container","spacing","PokemonCard","searchItemType","setSearchItemType","navigate","fetchPokemonData","InputProps","readOnly","handleSearchClear","startTransition","PokemonGrid","setPokemonList","setTotalItems","useParams","useNavigate","loading","setLoading","scrollPositionRef","useRef","handleScroll","current","window","scrollY","addEventListener","removeEventListener","async","url","arguments","length","undefined","limit","fullUrl","concat","response","fetch","data","json","results","pokemonDetailsPromises","detailsResponse","detailedPokemonData","Promise","all","error","console","scrollTo","className","BarForFilter","SearchForName","GridPagination","Box","display","justifyContent","alignItems","height","CircularProgress","PokemonList","pokemonId","Mainpage","Pokemons"],"sourceRoot":""}